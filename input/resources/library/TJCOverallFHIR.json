{
  "resourceType": "Library",
  "id": "TJCOverallFHIR",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2021-05-17T10:31:53.000-06:00",
    "source": "#OMF4RYKHQ6tMHqsE",
    "profile": [ "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/computable-library-cqfm" ]
  },
  "language": "en",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "cqf-tooling"
    }
  } ],
  "url": "http://ecqi.healthit.gov/ecqms/Library/TJCOverallFHIR",
  "version": "1.1.000",
  "name": "TJCOverallFHIR",
  "status": "active",
  "experimental": false,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "date": "2021-05-17T16:31:50+00:00",
  "publisher": "The Joint Commission",
  "description": "TJCOverallFHIR",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://ecqi.healthit.gov/ecqms/Library/FHIRHelpers|4.0.001"
  }, {
    "type": "depends-on",
    "display": "Library Global",
    "resource": "http://ecqi.healthit.gov/ecqms/Library/MATGlobalCommonFunctionsFHIR4|6.0.000"
  }, {
    "type": "depends-on",
    "display": "Library SDE",
    "resource": "http://ecqi.healthit.gov/ecqms/Library/SupplementalDataElementsFHIR4|2.0.000"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://ecqi.healthit.gov/ecqms/Library/FHIRHelpers|4.0.001"
  }, {
    "type": "depends-on",
    "display": "Code system LOINC",
    "resource": "http://loinc.org"
  }, {
    "type": "depends-on",
    "display": "Value set Comfort Measures",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/1.3.6.1.4.1.33895.1.3.0.45"
  }, {
    "type": "depends-on",
    "display": "Value set Discharge To Acute Care Facility",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.87"
  }, {
    "type": "depends-on",
    "display": "Value set Discharged to Health Care Facility for Hospice Care",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.207"
  }, {
    "type": "depends-on",
    "display": "Value set Discharged to Home for Hospice Care",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.209"
  }, {
    "type": "depends-on",
    "display": "Value set Emergency Department Visit",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292"
  }, {
    "type": "depends-on",
    "display": "Value set Encounter Inpatient",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307"
  }, {
    "type": "depends-on",
    "display": "Value set Hemorrhagic Stroke",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.212"
  }, {
    "type": "depends-on",
    "display": "Value set Ischemic Stroke",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.247"
  }, {
    "type": "depends-on",
    "display": "Value set Left Against Medical Advice",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.308"
  }, {
    "type": "depends-on",
    "display": "Value set Non-Elective Inpatient Encounter",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.424"
  }, {
    "type": "depends-on",
    "display": "Value set Observation Services",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143"
  }, {
    "type": "depends-on",
    "display": "Value set Patient Expired",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.309"
  }, {
    "type": "depends-on",
    "display": "Value set Ticagrelor Therapy",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.39"
  }, {
    "type": "depends-on",
    "display": "Value set Observation Services",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143"
  }, {
    "type": "depends-on",
    "display": "Value set Emergency Department Visit",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292"
  } ],
  "parameter": [ {
    "name": "Measurement Period",
    "use": "in",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Intervention Comfort Measures",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Non Elective Inpatient Encounter",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "All Stroke Encounter",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Encounter with Principal Diagnosis and Age",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Ischemic Stroke Encounter",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Ischemic Stroke Encounters with Discharge Disposition",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Comfort Measures during Hospitalization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "mustSupport": [ "intent" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/1.3.6.1.4.1.33895.1.3.0.45"
    }, {
      "path": "intent",
      "code": [ {
        "code": "order"
      } ]
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/1.3.6.1.4.1.33895.1.3.0.45"
    }, {
      "path": "status",
      "code": [ {
        "code": "completed"
      } ]
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "period", "period", "period" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.424"
    } ],
    "dateFilter": [ {
      "path": "period",
      "_valueDateTime": {
        "extension": [ {
          "url": "http://hl7.org/fhir/StructureDefinition/cqf-expression",
          "valueExpression": {
            "language": "text/cql-identifier",
            "expression": "Measurement Period"
          }
        } ]
      }
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "period", "period", "period" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.424"
    } ],
    "dateFilter": [ {
      "path": "period",
      "_valueDateTime": {
        "extension": [ {
          "url": "http://hl7.org/fhir/StructureDefinition/cqf-expression",
          "valueExpression": {
            "language": "text/cql-identifier",
            "expression": "Measurement Period"
          }
        } ]
      }
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "period", "period", "period" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.424"
    } ],
    "dateFilter": [ {
      "path": "period",
      "_valueDateTime": {
        "extension": [ {
          "url": "http://hl7.org/fhir/StructureDefinition/cqf-expression",
          "valueExpression": {
            "language": "text/cql-identifier",
            "expression": "Measurement Period"
          }
        } ]
      }
    } ]
  }, {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBUSkNPdmVyYWxsRkhJUiB2ZXJzaW9uICcxLjEuMDAwJw0KDQovKkB1cGRhdGU6IEBAQlRSIDIwMjAtMDMtMzEgLT4NCkluY3JlbWVudGVkIHZlcnNpb24gdG8gNS4wLjAwMA0KVXBkYXRlZCBGSElSIHZlcnNpb24gdG8gNC4wLjENCkBAKi8NCg0KdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScNCg0KaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMDAxJyBjYWxsZWQgRkhJUkhlbHBlcnMNCmluY2x1ZGUgTUFUR2xvYmFsQ29tbW9uRnVuY3Rpb25zRkhJUjQgdmVyc2lvbiAnNi4wLjAwMCcgY2FsbGVkIEdsb2JhbA0KaW5jbHVkZSBTdXBwbGVtZW50YWxEYXRhRWxlbWVudHNGSElSNCB2ZXJzaW9uICcyLjAuMDAwJyBjYWxsZWQgU0RFDQoNCmNvZGVzeXN0ZW0gIkxPSU5DIjogJ2h0dHA6Ly9sb2luYy5vcmcnIA0KDQp2YWx1ZXNldCAiQ29tZm9ydCBNZWFzdXJlcyI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMS4zLjYuMS40LjEuMzM4OTUuMS4zLjAuNDUnIA0KdmFsdWVzZXQgIkRpc2NoYXJnZSBUbyBBY3V0ZSBDYXJlIEZhY2lsaXR5IjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS44NycgDQp2YWx1ZXNldCAiRGlzY2hhcmdlZCB0byBIZWFsdGggQ2FyZSBGYWNpbGl0eSBmb3IgSG9zcGljZSBDYXJlIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4yMDcnIA0KdmFsdWVzZXQgIkRpc2NoYXJnZWQgdG8gSG9tZSBmb3IgSG9zcGljZSBDYXJlIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4yMDknIA0KdmFsdWVzZXQgIkVtZXJnZW5jeSBEZXBhcnRtZW50IFZpc2l0IjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4yOTInIA0KdmFsdWVzZXQgIkVuY291bnRlciBJbnBhdGllbnQiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNjY2LjUuMzA3JyANCnZhbHVlc2V0ICJIZW1vcnJoYWdpYyBTdHJva2UiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzODgzLjMuMTE3LjEuNy4xLjIxMicgDQp2YWx1ZXNldCAiSXNjaGVtaWMgU3Ryb2tlIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4yNDcnIA0KdmFsdWVzZXQgIkxlZnQgQWdhaW5zdCBNZWRpY2FsIEFkdmljZSI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy4xMTcuMS43LjEuMzA4JyANCnZhbHVlc2V0ICJOb24tRWxlY3RpdmUgSW5wYXRpZW50IEVuY291bnRlciI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy4xMTcuMS43LjEuNDI0JyANCnZhbHVlc2V0ICJPYnNlcnZhdGlvbiBTZXJ2aWNlcyI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM3NjIuMS40LjExMTEuMTQzJyANCnZhbHVlc2V0ICJQYXRpZW50IEV4cGlyZWQiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzODgzLjMuMTE3LjEuNy4xLjMwOScgDQp2YWx1ZXNldCAiVGljYWdyZWxvciBUaGVyYXB5IjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzc2Mi4xLjQuMTExMC4zOScgDQoNCmNvZGUgIkJpcnRoIGRhdGUiOiAnMjExMTItOCcgZnJvbSAiTE9JTkMiIGRpc3BsYXkgJ0JpcnRoIGRhdGUnDQoNCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlVGltZT4NCiAgZGVmYXVsdCBJbnRlcnZhbFtAMjAxOS0wMS0wMVQwMDowMDowMC4wLCBAMjAyMC0wMS0wMVQwMDowMDowMC4wKQ0KDQpjb250ZXh0IFBhdGllbnQNCg0KZGVmaW5lICJJbnRlcnZlbnRpb24gQ29tZm9ydCBNZWFzdXJlcyI6DQogIChbIlNlcnZpY2VSZXF1ZXN0IjogIkNvbWZvcnQgTWVhc3VyZXMiXSBQDQogICAgCQl3aGVyZSBQLmludGVudCA9ICdvcmRlcicpDQogICAgCQl1bmlvbg0KICAgIAkJKFsiUHJvY2VkdXJlIjogIkNvbWZvcnQgTWVhc3VyZXMiXSBJbnRlcnZlbnRpb25QZXJmb3JtZWQNCiAgICAJCXdoZXJlIEludGVydmVudGlvblBlcmZvcm1lZC5zdGF0dXMgPSAnY29tcGxldGVkJykNCg0KZGVmaW5lICJBbGwgU3Ryb2tlIEVuY291bnRlciI6DQogICJOb24gRWxlY3RpdmUgSW5wYXRpZW50IEVuY291bnRlciIgTm9uRWxlY3RpdmVFbmNvdW50ZXINCiAgICAgICAgd2hlcmUgR2xvYmFsLlByaW5jaXBhbERpYWdub3NpcyhOb25FbGVjdGl2ZUVuY291bnRlcikuY29kZSBpbiAiSGVtb3JyaGFnaWMgU3Ryb2tlIg0KICAgICAgICAgIG9yIEdsb2JhbC5QcmluY2lwYWxEaWFnbm9zaXMoTm9uRWxlY3RpdmVFbmNvdW50ZXIpLmNvZGUgaW4gIklzY2hlbWljIFN0cm9rZSINCg0KZGVmaW5lICJJc2NoZW1pYyBTdHJva2UgRW5jb3VudGVyIjoNCiAgIkVuY291bnRlciB3aXRoIFByaW5jaXBhbCBEaWFnbm9zaXMgYW5kIEFnZSIgRW5jb3VudGVyV2l0aEFnZQ0KICAgIAkJd2hlcmUgR2xvYmFsLlByaW5jaXBhbERpYWdub3NpcyhFbmNvdW50ZXJXaXRoQWdlKS5jb2RlIGluICJJc2NoZW1pYyBTdHJva2UiDQoNCmRlZmluZSAiTm9uIEVsZWN0aXZlIElucGF0aWVudCBFbmNvdW50ZXIiOg0KICBbIkVuY291bnRlciI6ICJOb24tRWxlY3RpdmUgSW5wYXRpZW50IEVuY291bnRlciJdIE5vbkVsZWN0aXZlRW5jb3VudGVyDQogICAgCQl3aGVyZSBHbG9iYWwuIkxlbmd0aEluRGF5cyIoTm9uRWxlY3RpdmVFbmNvdW50ZXIucGVyaW9kKSA8PSAxMjANCiAgICAJCQlhbmQgTm9uRWxlY3RpdmVFbmNvdW50ZXIucGVyaW9kIGVuZHMgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiDQoNCmRlZmluZSAiSXNjaGVtaWMgU3Ryb2tlIEVuY291bnRlcnMgd2l0aCBEaXNjaGFyZ2UgRGlzcG9zaXRpb24iOg0KICAiSXNjaGVtaWMgU3Ryb2tlIEVuY291bnRlciIgSXNjaGVtaWNTdHJva2VFbmNvdW50ZXINCiAgICAJCXdoZXJlIElzY2hlbWljU3Ryb2tlRW5jb3VudGVyLmhvc3BpdGFsaXphdGlvbi5kaXNjaGFyZ2VEaXNwb3NpdGlvbiBpbiAiRGlzY2hhcmdlIFRvIEFjdXRlIENhcmUgRmFjaWxpdHkiDQogICAgCQkJb3IgSXNjaGVtaWNTdHJva2VFbmNvdW50ZXIuaG9zcGl0YWxpemF0aW9uLmRpc2NoYXJnZURpc3Bvc2l0aW9uIGluICJMZWZ0IEFnYWluc3QgTWVkaWNhbCBBZHZpY2UiDQogICAgCQkJb3IgSXNjaGVtaWNTdHJva2VFbmNvdW50ZXIuaG9zcGl0YWxpemF0aW9uLmRpc2NoYXJnZURpc3Bvc2l0aW9uIGluICJQYXRpZW50IEV4cGlyZWQiDQogICAgCQkJb3IgSXNjaGVtaWNTdHJva2VFbmNvdW50ZXIuaG9zcGl0YWxpemF0aW9uLmRpc2NoYXJnZURpc3Bvc2l0aW9uIGluICJEaXNjaGFyZ2VkIHRvIEhvbWUgZm9yIEhvc3BpY2UgQ2FyZSINCiAgICAJCQlvciBJc2NoZW1pY1N0cm9rZUVuY291bnRlci5ob3NwaXRhbGl6YXRpb24uZGlzY2hhcmdlRGlzcG9zaXRpb24gaW4gIkRpc2NoYXJnZWQgdG8gSGVhbHRoIENhcmUgRmFjaWxpdHkgZm9yIEhvc3BpY2UgQ2FyZSINCg0KICAgIC8vIFRyYW5zbGF0b3IgaXNzdWUgd2l0aCAxLjQuOS1TTkFQU0hPVDogaHR0cHM6Ly9naXRodWIuY29tL2NxZnJhbWV3b3JrL2NsaW5pY2FsX3F1YWxpdHlfbGFuZ3VhZ2UvaXNzdWVzLzUxMQ0KDQpkZWZpbmUgIkVuY291bnRlciB3aXRoIFByaW5jaXBhbCBEaWFnbm9zaXMgYW5kIEFnZSI6DQogICJBbGwgU3Ryb2tlIEVuY291bnRlciIgQWxsU3Ryb2tlRW5jb3VudGVyDQogICAgCQl3aXRoIFsiUGF0aWVudCJdIEJpcnRoRGF0ZQ0KICAgIAkJCXN1Y2ggdGhhdCBBZ2VJblllYXJzQXQoc3RhcnQgb2YgRkhJUkhlbHBlcnMuVG9JbnRlcnZhbChBbGxTdHJva2VFbmNvdW50ZXIucGVyaW9kKSkgPj0gMTgNCg0KZGVmaW5lICJDb21mb3J0IE1lYXN1cmVzIGR1cmluZyBIb3NwaXRhbGl6YXRpb24iOg0KICAiSXNjaGVtaWMgU3Ryb2tlIEVuY291bnRlciIgSXNjaGVtaWNTdHJva2VFbmNvdW50ZXINCiAgICAgICB3aXRoICJJbnRlcnZlbnRpb24gQ29tZm9ydCBNZWFzdXJlcyIgQ29tZm9ydE1lYXN1cmUNCiAgICAgICBzdWNoIHRoYXQgRkhJUkhlbHBlcnMuVG9EYXRlVGltZShDb2FsZXNjZShDb21mb3J0TWVhc3VyZS5wZXJmb3JtZWQgYXMgZGF0ZVRpbWUsQ29tZm9ydE1lYXN1cmUuYXV0aG9yZWRPbikpIGR1cmluZyBHbG9iYWwuIkhvc3BpdGFsaXphdGlvbldpdGhPYnNlcnZhdGlvbiIoSXNjaGVtaWNTdHJva2VFbmNvdW50ZXIpDQoNCi8qDQogIEdsb2JhbC5Ub0RhdGUgbm8gbG9uZ2VyIGV4aXN0cyBhbmQgRkhJUkhlbHBlcnMuVG9EYXRlIGRvZXMgbm90IHRha2UgYSBTeXN0ZW0uRGF0ZVRpbWUNCmRlZmluZSBmdW5jdGlvbiAiQ2FsZW5kYXJEYXlPZk9yRGF5QWZ0ZXIiKFN0YXJ0VmFsdWUgRGF0ZVRpbWUgKToNCiAgSW50ZXJ2YWwoRkhJUkhlbHBlcnMuIlRvRGF0ZSIoU3RhcnRWYWx1ZSksIEdsb2JhbC4iVG9EYXRlIihTdGFydFZhbHVlICsgMiBkYXlzKSkNCiAgKi8NCg=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}